import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.*;
import chocopy.common.astnodes.*;

/* The following code section is copied verbatim to the generated
 * parser class. */
parser code {:

    /* The following fields and methods deal with error reporting
     * Avoid changing these unless you know what you are doing. */

    /** Node that accumulates error messages to be added to the Program
     *  node produced as a result. */
    public final Errors errors = new Errors(new ArrayList<>());

    /** Return the Program node that results from parsing the stream of
     *  tokens produced by lexical analysis.  In the case of syntax errors,
     *  the program may be empty, but will have error messages. */
    public Program parseProgram(boolean debug) {
        try {
            Symbol result = debug ? debug_parse() : parse();
            if (result == null || !(result.value instanceof Program)) {
                return new Program(new Location(0, 0), new Location(0, 0),
                                   new ArrayList<Declaration>(),
                                   new ArrayList<Stmt>(),
                                   errors);
            } else {
                return (Program) result.value;
            }
        } catch (RuntimeException excp) {
            throw excp;
        } catch (Exception excp) {
            String msg =
                String.format("Internal parser error detected: %s%n", excp);
            throw new AssertionError(msg);
        }
    }

    @Override
    public SymbolFactory getSymbolFactory() {
        return ((ChocoPyLexer) getScanner()).symbolFactory;
    }

    @Override
    public void syntax_error(Symbol cur_token) {
                String token = symbl_name_from_id(cur_token.sym);
                String text = ((ChocoPyLexer) getScanner()).yytext();
                errors.syntaxError(
                    ((ComplexSymbolFactory.ComplexSymbol) cur_token).xleft,
                    ((ComplexSymbolFactory.ComplexSymbol) cur_token).xright,
                    "Parse error near token %s: %s", token, text);
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) {
        /* Do not die */
    }
:}


/**************************************************************************
 *              FEEL FREE TO MODIFY ANYTHING BELOW THIS LINE              
 *
 * The rules provided below parse expressions of the form <INT> + <INT> + ... 
 * You can re-use these rules or edit them as you wish. The start rule
 * should return a node of type Program.
 *
 * Tips: Production rules are usually followed by action code that will be
 * copied to the generated parser to be executed immediately after a reduce
 * operation; that is, when a production rule has been matched. You can name
 * a nonterminal or terminal symbol in a production rule using the colon
 * notation, e.g. expr_stmt ::= expr:e, to get the AST node for the matched
 * expression. In the action code, `e` will be a variable of whatever type
 * has been declared for the corresponding nonterminal, such as `Expr`.
 * Therefore, you can construct an AST Node of type `ExprStmt` with `e` in the
 * constructor: `new ExprStmt(exleft, exright, e)`
 *
 * The variables `exleft` and `exright` are automatically generated by CUP
 * and contain Location objects for the start and end of the expression `e`.
 * You can collect start and line number info for AST nodes by taking the
 * location of the left end of the leftmost symbol in a rule and the
 * location of the right end of the rightmost symbol. The auto-generated
 * variables have names `<sym>xleft` and `<sym>xright`, where <sym> is the
 * name given to the symbol using the colon notation.
 *
 * When you have nonterminals that are lists of things, e.g. List<Stmt> or
 * List<Declaration>, it is helpful to get the leftmost and rightmost
 * source location from within this list; we have provided some utility
 * functions below to do just that.
 **************************************************************************/


/* The following code section is copied verbatim to the class that performs
 * production-rule actions. */
action code {:

    /** Return a mutable list initially containing the single value ITEM. */
    <T> List<T> single(T item) {
        List<T> list = new ArrayList<>();
        if (item != null) {
            list.add(item);
        }
        return list;
    }

    /** If ITEM is non-null, appends it to the end of LIST.  Then returns
     *  LIST. */
    <T> List<T> combine(List<T> list, T item) {
        if (item != null) {
            list.add(item);
        }
        return list;
    }

    /** If ITEM is non-null, appends it to the front of LIST.  Then returns
     *  LIST. */
    <T> List<T> combine(T item, List<T> list) {
        if (item != null) {
            list.add(0, item);
        }
        return list;
    }

    /** Return a mutable empty list. */
    <T> List<T> empty() {
        return new ArrayList<T>();
    }

    /** Return the leftmost non-whitespace location in NODES, or null if NODES
     *  is empty.  Assumes that the nodes of NODES are ordered in increasing
     *  order of location, from left to right. */
    ComplexSymbolFactory.Location getLeft(List<? extends Node> nodes) {
        if (nodes.isEmpty()) {
            return null;
        }
        Node first = nodes.get(0);
        return new ComplexSymbolFactory.Location(first.getLocation()[0],
                                                 first.getLocation()[1]);
    }

    /** Return the rightmost non-whitespace location in NODES, or null if
     *  NODES is empty.  Assumes that the nodes of NODES are ordered in
     *  increasing order of location, from left to right. */
    ComplexSymbolFactory.Location getRight(List<? extends Node> nodes) {
        if (nodes.isEmpty()) {
            return null;
        }
        Node last = nodes.get(nodes.size() - 1);
        return new ComplexSymbolFactory.Location(last.getLocation()[2],
                                                 last.getLocation()[3]);
    }
:}

/* Terminal symbols (tokens returned by the lexer).  The declaration
 *     terminal <identifier1>, <identifier2>, ...;
 * declares each <identifieri> as the denotation of a distinct type terminal
 * symbol for use in the grammar.  The declaration
 *     terminal <type> <identifier1>, ...;
 * does the same, and in addition indicates that the lexer supplies a
 * semantic value of type <type> for these symbols that may be referenced
 * in actions ( {: ... :} ).
 */
terminal NEWLINE;
terminal INDENT, DEDENT;
terminal FALSE, NONE, TRUE, AND, AS, ASSERT, ASYNC, AWAIT;
terminal BREAK, CLASS, CONTINUE, DEF, DEL, ELIF, ELSE;
terminal EXCEPT, FINALLY, FOR, FROM, GLOBAL, IF, IMPORT;
terminal IN, LAMBDA, NONLOCAL, NOT, OR, PASS, RAISE;
terminal RETURN, TRY, WHILE, WITH, YIELD;
terminal UMINUS;

terminal String IDENTIFIER, STRING, IDSTRING;
terminal String PLUS, MINUS, TIMES, DIVIDE, MOD;
terminal String LESSTHAN, GREATERTHAN, LESSEQ, GREATEREQ;
terminal String EQEQ, NOTEQ, EQ;
terminal String LPAREN, RPAREN, LBRACKET, RBRACKET;
terminal String COMMA, COLON, DOT, ARROW;
terminal String IS;
terminal Integer INTEGER; 
/* Returned by the lexer for erroneous tokens.  Since it does not appear in
 * the grammar, it indicates a syntax error. */
terminal UNRECOGNIZED;   

/* Nonterminal symbols (defined in production rules below).
 * As for terminal symbols, 
 *     non terminal <type> <identifier1>, ..., <identifiern>; 
 * defines the listed nonterminal identifier symbols to have semantic values
 * of type <type>. */
non terminal Program            program;
non terminal List<Declaration>  program_head;
non terminal List<Stmt>         stmt_list0, stmt_list1;
non terminal Identifier         id;
non terminal ClassDef           class_def;
non terminal List<Declaration>  class_body, class_body_def_list1;
non terminal FuncDef            func_def;
non terminal List<Declaration>  func_head;
non terminal List<TypedVar>     params, with_params;
non terminal TypeAnnotation     type;
non terminal TypedVar           typed_var;
non terminal GlobalDecl         global_decl;
non terminal NonLocalDecl       nonlocal_decl;
non terminal VarDef             var_def;
non terminal Stmt               stmt, simple_stmt;
non terminal List<Stmt>         else_block, block;
non terminal List<Expr>         expr_list1, target_list1;
non terminal Literal            literal;
non terminal Expr               expr, cexpr, target;
non terminal MemberExpr         member_expr;
non terminal IndexExpr          index_expr;

/* Precedences (lowest to highest) for resolving what would otherwise be
 * ambiguities in the form of shift/reduce conflicts.. */
precedence nonassoc IF, ELSE;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence nonassoc EQEQ, NOTEQ,
     LESSTHAN, GREATERTHAN, LESSEQ, GREATEREQ, IS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left UMINUS;
precedence nonassoc DOT, LBRACKET, RBRACKET;

/* The start symbol. */
start with program;


/*****  GRAMMAR RULES *****/

// program ::= program_head:d opt_stmt_list:s
//         {: RESULT = new Program(d.isEmpty() ? getLeft(s) : getLeft(d),
//                                 getRight(s), d, s, errors);
//         :}
//         ;

// /* Initial list of declarations. */
// program_head ::= /* not implemented; currently matches empty string */
//                                      {: RESULT = empty(); :}
//                 ;

// opt_stmt_list ::=                    {: RESULT = empty(); :}
//                 | stmt_list:s        {: RESULT = s; :}
//                 ;

// stmt_list ::= stmt:s                 {: RESULT = single(s); :}
//             | stmt_list:l stmt:s     {: RESULT = combine(l, s); :}
//             | stmt_list:l error      {: RESULT = l; :}
//             /* If there is a syntax error in the source, this says to discard
//              * symbols from the parsing stack and perform reductions until
//              * there is a stmt_list on top of the stack, and then to discard
//              * input symbols until it is possible to shift again, reporting
//              * a syntax error. */
//             ;

// stmt ::= expr_stmt:s NEWLINE {: RESULT = s; :}
//               ;

// expr_stmt ::= expr:e    {: RESULT = new ExprStmt(exleft, exright, e); :}
//             ;

// expr ::= binary_expr:e  {: RESULT = e; :}
//        | NUMBER:n       {: RESULT = new IntegerLiteral(nxleft, nxright, n); :}
//        ;


// /* A binary expression, illustrating how to find the left and right
//  * source position of a phrase. */
// binary_expr ::= expr:e1 PLUS:op expr:e2
//                         {: RESULT = new BinaryExpr(e1xleft, e2xright, 
//                                                    e1, op, e2); :}
//               ;


/* The rules for ChocoPy */
program ::= program_head:d stmt_list0:s
            {: RESULT = new Program(d.isEmpty() ? getLeft(s) : getLeft(d),
                                    getRight(s), d, s, errors);
            :}
          ;

/* Initial list of declarations. */
program_head ::=                        {: RESULT = empty(); :}
           | program_head:d var_def:x   {: RESULT = combine(d, x); :}
           | program_head:d func_def:x  {: RESULT = combine(d, x); :}
           | program_head:d class_def:x {: RESULT = combine(d, x); :}
           ;

stmt_list0 ::=                          {: RESULT = empty(); :}
             | stmt:x stmt_list0:l      {: RESULT = combine(x, l); :}
             | error stmt_list0:l       {: RESULT = l; :}
             ;

id ::= IDENTIFIER:id                    
       {: RESULT = new Identifier(idxleft, idxright, id); :}
     ;
            
class_def ::= CLASS:kw id:id1 LPAREN id:id2 RPAREN COLON NEWLINE INDENT class_body:body DEDENT 
              {: RESULT = new ClassDef(kwxleft, getRight(body), id1, id2, body);:}
            ;

class_body ::= PASS NEWLINE             {: RESULT = empty(); :}
             | class_body_def_list1:l   {: RESULT = l; :}
             ;
            
class_body_def_list1 ::= var_def:x      {: RESULT = single(x); :}
                       | func_def:x     {: RESULT = single(x); :}
                       | class_body_def_list1:l var_def:x   {: RESULT = combine(l, x); :}
                       | class_body_def_list1:l func_def:x  {: RESULT = combine(l, x); :}
                       ;
                    
func_def ::= DEF:def id:id LPAREN params:paras RPAREN COLON:colon NEWLINE INDENT func_head:d stmt_list1:l DEDENT
             {: ClassType rtn_type = new ClassType(colonxleft, colonxright, "<None>");
                RESULT = new FuncDef(defxleft, getRight(l), 
                                    id, paras, rtn_type, d, l); 
             :}
           | DEF:def id:id LPAREN params:paras RPAREN ARROW type:rtn_type COLON NEWLINE INDENT func_head:d stmt_list1:l DEDENT
             {: RESULT = new FuncDef(defxleft, getRight(l), 
                                    id, paras, rtn_type, d, l); 
             :}
           ;

params ::=                              {: RESULT = empty(); :}
         | with_params:with_p           {: RESULT = with_p; :}
         ;    

with_params ::= typed_var:x                     {: RESULT = single(x); :}
              | with_params:l COMMA typed_var:x {: RESULT = combine(l, x); :}
              ;

func_head ::=                               {: RESULT = empty(); :}
            | func_head:l global_decl:x     {: RESULT = combine(l, x); :}
            | func_head:l nonlocal_decl:x   {: RESULT = combine(l, x); :}
            | func_head:l var_def:x         {: RESULT = combine(l, x); :}
            | func_head:l func_def:x        {: RESULT = combine(l, x); :}
            ;

stmt_list1 ::= stmt:x                       {: RESULT = single(x); :}
             | stmt_list1:l stmt:x          {: RESULT = combine(l, x); :}
             ;

typed_var ::= id:id COLON type:type      
              {: RESULT = new TypedVar(idxleft, typexright,
                                       id, type);
              :}
            ;

type ::= IDENTIFIER:id              
         {: RESULT = new ClassType(idxleft, idxright, id); :}    
       | IDSTRING:idstr             
         {: RESULT = new ClassType(idstrxleft, idstrxright, idstr); :}
       | LBRACKET:lp type:type RBRACKET:rp     
         {: RESULT = new ListType(lpxleft, rpxright, type); :}
       ;

global_decl ::= GLOBAL:kw id:id NEWLINE
                {: RESULT = new GlobalDecl(kwxleft, idxright, id); :}
              ;

nonlocal_decl ::= NONLOCAL:kw id:id NEWLINE
                  {: RESULT = new NonLocalDecl(kwxleft, idxright, id); :}
                ;

var_def ::= typed_var:var EQ literal:liter NEWLINE
            {: RESULT = new VarDef(varxleft, literxright,
                                   var, liter);
            :}
          ;
        
stmt ::= simple_stmt:s NEWLINE
         {: RESULT = s; :}
       | IF:if_t expr:e COLON block:block else_block:el_block
         {: Location right = block.isEmpty() ? exright : getRight(block);
            right = el_block.isEmpty() ? right : getRight(el_block);
            RESULT = new IfStmt(if_txleft, right,
                                e, block, el_block);
         :}
       | WHILE:kw expr:e COLON:colon block:block
         {: RESULT = new WhileStmt(kwxleft, block.isEmpty() ? colonxright : getRight(block), 
                                   e, block);
         :}
       | FOR:kw id:id IN expr:e COLON:colon block:block
         {: RESULT = new ForStmt(kwxleft, block.isEmpty() ? colonxright : getRight(block), 
                                  id, e, block);
         :}
       ;

else_block ::=                      {: RESULT = empty(); :}
             | ELSE COLON block:b   {: RESULT = b; :}
             | ELIF:elif expr:e COLON block:block else_block:el_block
               {: Location right = block.isEmpty() ? exright : getRight(block);
                  right = el_block.isEmpty() ? right : getRight(el_block);
                  IfStmt ifStmt = new IfStmt(elifxleft, right,
                                             e, block, el_block);
                  RESULT = single(ifStmt);                  
               :}
             ;

simple_stmt ::= PASS                {: RESULT = null; :}
              // | error
              | expr:e              {: RESULT = new ExprStmt(exleft, exright, e); :}
              | RETURN:rtn expr:e   {: RESULT = new ReturnStmt(rtnxleft, exright, e); :}
              | RETURN:rtn          {: RESULT = new ReturnStmt(rtnxleft, rtnxright, null); :}
              | target_list1:l expr:e   
                {: RESULT = new AssignStmt(getLeft(l), exright, l, e); :}
              ;

target_list1 ::= target:tar EQ      {: RESULT = single(tar); :}
               | target_list1:l target:tar EQ
                 {: RESULT = combine(l, tar); :}
               ;
    
block ::= NEWLINE INDENT stmt_list1:l DEDENT
          {: RESULT = l; :}
        ;

literal ::= NONE:liter        {: RESULT = new NoneLiteral(literxleft, literxright); :}
          | TRUE:liter        {: RESULT = new BooleanLiteral(literxleft, literxright, true); :}
          | FALSE:liter       {: RESULT = new BooleanLiteral(literxleft, literxright, false); :}
          | INTEGER:liter     {: RESULT = new IntegerLiteral(literxleft, literxright, liter); :}
          | IDSTRING:liter    {: RESULT = new StringLiteral(literxleft, literxright, liter); :}
          | STRING:liter      {: RESULT = new StringLiteral(literxleft, literxright, liter); :}
          ;

expr ::= cexpr:e                {: RESULT = e; :}
       | NOT:not expr:e         {: RESULT = new UnaryExpr(notxleft, exright, "not", e); :}
       | expr:e1 AND expr:e2    {: RESULT = new BinaryExpr(e1xleft, e2xright, e1, "and", e2); :}
       | expr:e1 OR expr:e2     {: RESULT = new BinaryExpr(e1xleft, e2xright, e1, "or", e2); :}
       | expr:e1 IF expr:e2 ELSE expr:e3
         {: RESULT = new IfExpr(e1xleft, e3xright, e2, e1, e3); :}
       ;

cexpr ::= id:id                 {: RESULT = id; :}
        | literal:liter         {: RESULT = liter; :}
        | LBRACKET RBRACKET     {: RESULT = null; :}
        | LBRACKET:lb expr_list1:l RBRACKET:rb
          {: RESULT = new ListExpr(lbxleft, rbxright, l); :}
        | LPAREN expr:e RPAREN  {: RESULT = e; :}
        | member_expr:e         {: RESULT = e; :}
        | index_expr:e          {: RESULT = e; :}
        | member_expr:e LPAREN RPAREN:rb
          {: RESULT = new MethodCallExpr(exleft, rbxright, e, empty()); :}
        | member_expr:e LPAREN expr_list1:l RPAREN:rb
          {: RESULT = new MethodCallExpr(exleft, rbxright, e, l); :}
        | id:id LPAREN RPAREN:rb
          {: RESULT = new CallExpr(idxleft, rbxright, id, empty()); :}
        | id:id LPAREN expr_list1:l RPAREN:rb
          {: RESULT = new CallExpr(idxleft, rbxright, id, l); :}
        | cexpr:e1 PLUS:op cexpr:e2
          {: RESULT = new BinaryExpr(e1xleft, e2xright, e1, op, e2); :}
        | cexpr:e1 MINUS:op cexpr:e2
          {: RESULT = new BinaryExpr(e1xleft, e2xright, e1, op, e2); :}
        | cexpr:e1 TIMES:op cexpr:e2
          {: RESULT = new BinaryExpr(e1xleft, e2xright, e1, op, e2); :}
        | cexpr:e1 DIVIDE:op cexpr:e2
          {: RESULT = new BinaryExpr(e1xleft, e2xright, e1, op, e2); :}
        | cexpr:e1 MOD:op cexpr:e2
          {: RESULT = new BinaryExpr(e1xleft, e2xright, e1, op, e2); :}
        | cexpr:e1 EQEQ:op cexpr:e2
          {: RESULT = new BinaryExpr(e1xleft, e2xright, e1, op, e2); :}
        | cexpr:e1 NOTEQ:op cexpr:e2
          {: RESULT = new BinaryExpr(e1xleft, e2xright, e1, op, e2); :}
        | cexpr:e1 LESSEQ:op cexpr:e2
          {: RESULT = new BinaryExpr(e1xleft, e2xright, e1, op, e2); :}
        | cexpr:e1 LESSTHAN:op cexpr:e2
          {: RESULT = new BinaryExpr(e1xleft, e2xright, e1, op, e2); :}
        | cexpr:e1 GREATEREQ:op cexpr:e2
          {: RESULT = new BinaryExpr(e1xleft, e2xright, e1, op, e2); :}
        | cexpr:e1 GREATERTHAN:op cexpr:e2
          {: RESULT = new BinaryExpr(e1xleft, e2xright, e1, op, e2); :}
        | cexpr:e1 IS:op cexpr:e2
          {: RESULT = new BinaryExpr(e1xleft, e2xright, e1, op, e2); :}
        | MINUS:minus cexpr:e 
          {: RESULT = new UnaryExpr(minusxleft, exright, "-", e); :}
          %prec UMINUS
        ;
    
expr_list1 ::= expr:e           {: RESULT = single(e); :}
             | expr_list1:l COMMA expr:e
               {: RESULT = combine(l, e); :}
             ;

member_expr ::= cexpr:e DOT id:id
                {: RESULT = new MemberExpr(exleft, idxright, e, id); :}
              ;

index_expr ::= cexpr:e1 LBRACKET expr:e2 RBRACKET:rb
               {: RESULT = new IndexExpr(e1xleft, rbxright, e1, e2); :}
             ;

target ::= id:id            {: RESULT = id; :}
         | member_expr:e    {: RESULT = e; :}
         | index_expr:e     {: RESULT = e; :}
         ;
